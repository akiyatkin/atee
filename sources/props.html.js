import err from "/-controller/err.html.js"
import field from "/-dialog/field.html.js"
import svg from "/-sources/svg.html.js"
export const css = ['/-sources/represent.css','/-sources/revscroll.css']
const defcustom = (value) => {
	if (value) return 'represent-def-1'
	else return 'represent-custom-0'
}
export const ROOT = (data, env) => `
	<h1>–°–≤–æ–π—Å—Ç–≤–∞</h1>
	<div id="TABLE"></div>
`
export const TABLE = (data, env) => err(data, env) || `
	<style>
		${env.scope} .ellipsis {
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			max-width: 300px;
		}
		/*${env.scope} table .prop_column:before {
			content:"‚úÖ";
		}
		${env.scope} table .prop_more:before {
			content:"üü°";
		}
		${env.scope} table .prop_system:before {
			content:"üõ°Ô∏è";
		}*/
	</style>
	<form style="display: flex; margin: 1em 0; gap: 1em; flex-wrap: wrap">
		<div class="float-label">
			<input id="freeinp" name="query" type="search" placeholder="–ü–æ–∏—Å–∫" value="${env.bread.get.query ?? ''}">
			<label for="freeinp">–ü–æ–∏—Å–∫</label>
		</div>
		<div style="display: flex; justify-content: space-between; flex-grow: 1; gap: 1em;">
			<button type="submit">–ù–∞–π—Ç–∏</button>
			${field.prompt({
				cls: 'a',
				value: '–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ', 
				name: 'title',
				input: '',
				label: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞', 
				type: 'text', 
				action: '/-sources/set-prop-create', 
				args: {entity_id: data.entity_id},
				global: 'check'
			})}
		</div>
		<script>
			(form => {
				const btn = form.querySelector('button')
				const input = form.querySelector('input')
				input.focus()
				input.setSelectionRange(input.value.length, input.value.length)
				form.addEventListener('submit', async (e) => {
					e.preventDefault()
					const Client = await window.getClient()
					Client.go('props?query=' + input.value, false)
					Client.reloaddiv("${env.layer.div}")
				})
			})(document.currentScript.parentElement)
		</script>
	</form>
	
	<div class="revscroll" style="margin: 2em 0">
		<table draggable="false" class="list">
			<thead>
				<tr>
					<td></td>
					<td></td>
					<td>–°–≤–æ–π—Å—Ç–≤–æ</td>
					<td>–¢–∏–ø</td>
					<td>–ó–Ω–∞—á–µ–Ω–∏–π</td>
					<td>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</td>
					<td></td>
				</tr>
			</thead>
			<tbody draggable="false">
				${data.list.map(prop => showTr(data, env, prop)).join('')}
			</tbody>
		</table>
		${showScriptDrag(data, env)}
		<script>
			(async div => {
				const table = div.querySelector('table')
				table.addEventListener('click', (e) => {
					const old = table.querySelector('.clicked')
					if (old) old.classList.remove('clicked')
					const tr = e.target.closest('tr')
					if (!tr) return
					tr.classList.add('clicked')
				})
			})(document.currentScript.parentElement)
		</script>
		<script>
			(div => {
				const name = 'represent_prop'
				for (const btn of div.getElementsByClassName(name)) {
					btn.addEventListener('click', async () => {
						const td = btn.closest('td')
						const tr = td.parentElement
						const prop_id = tr.dataset.id
						const represent = await import('/-sources/represent.js').then(r => r.default)
						const data = await represent.set(btn, name, {prop_id})
						if (!data.result) return
						const Client = await window.getClient()
						Client.global('check')
					})
				}
			})(document.currentScript.parentElement)
		</script>
	</div>
	
</p>
`
const showTr = (data, env, prop) => `
	<tr class="item" data-id="${prop.prop_id}" style="white-space: nowrap;">
		<td>
			<button title="–ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞" class="represent_prop eye transparent ${defcustom(prop.represent_prop)}">${svg.eye()}</button>
		</td>
		<td>
			${field.setpop({
				heading:'–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–π—Å—Ç–≤–∞',
				cls: 'transparent',
				value: prop.known,
				name: 'known',
				descr: '<b>more</b> –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ–Ω–æ –ø–æ–∫–∞–∂–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ —Ç–∞–∫–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ. –°–≤–æ–π—Å—Ç–≤–æ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π <b>column</b> –ø–æ–∫–∞–∂–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –µ–≥–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –Ω–∏–≥–¥–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è, –Ω–æ –ø—Ä–∏–¥—ë—Ç —Å –¥–∞–Ω–Ω—ã–º–∏. –°–≤–æ–π—Å—Ç–≤–æ <b>system</b> –¥–∞–∂–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –ø—Ä–∏–¥—ë—Ç –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä –±—ã—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–µ–º –≥—Ä—É–ø–ø.',
				action: '/-sources/set-known', 
				values: {"system":"üõ°Ô∏è system", "more":"üü° more", "column":"‚úÖ column"},
				args: {prop_id: prop.prop_id},
				global: 'check'
			})}
		</td>
		<td>
			<a href="prop/${prop.prop_id}">${prop.prop_title}</a>
		</td>
		<td>
			<!-- ${prop.type} -->
			${field.setpop({
				heading:'–¢–∏–ø',
				cls: 'a',
				value: prop.type,
				name: 'type',
				descr: '–¢–∏–ø –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –±—ã—Å—Ç—Ä–æ–π –≤—ã–±–æ—Ä–∫–∏. –°–∞–º—ã–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π <b>number</b>, –¥–∞–ª–µ–µ <b>date</b>, –∑–∞—Ç–µ–º <b>volume</b> –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∏ –∫–æ—Ä–æ—á–µ <b>127 —Å–∏–º–≤–æ–ª–æ–≤</b>. –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç <b>text</b>. –î–ª—è –∫–ª—é—á–µ–π –∏ —Å–≤—è–∑–µ–π –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ value.',
				action: '/-sources/set-prop-type', 
				values: {"number":"number", "date":"date", "value":"value", "text":"text"},
				args: {prop_id: prop.prop_id},
				global: 'check'
			})}
		</td>
		<td>
			<!-- ${prop.multi ? "–ù–µ—Å–∫–æ–ª—å–∫–æ" : "–û–¥–Ω–æ"} -->
			${field.setpop({
				heading:'–ó–Ω–∞—á–µ–Ω–∏–π',
				cls: 'a',
				value: prop.multi,
				name: 'bit',
				descr: '–ù–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç–æ–π —Å –ø—Ä–æ–±–µ–ª–æ–º. –ü—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—É—é –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ <code>&amp;#44;</code> —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è. –ù–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é –∑–∞–º–µ–Ω—É.',
				action: '/-sources/set-prop-prop', 
				values: {"":"–û–¥–Ω–æ", "1":"–ù–µ—Å–∫–æ–ª—å–∫–æ"},
				args: {prop_id: prop.prop_id, propprop: 'multi'},
				global: 'check'
			})}
		</td>		
		<td class="ellipsis">
			${field.areamin({
				name: 'comment', 
				label: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 
				action: '/-sources/set-prop-comment', 
				args: {prop_id: prop.prop_id},
				value: prop.comment
			})}
		</td>
		<td>
			${field.button({
				cls: 'transparent mute',
				label: svg.cross(), 
				confirm: '–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º?',
				action: '/-sources/set-prop-delete',
				args: {prop_id: prop.prop_id},
				global: 'check'
			})}
		</td>
	</tr>
`
const showScriptDrag = (data, env) => `
	<script>
		(async table => {
			const list = table.tBodies[0]
			const Drag = await import('/-note/theory/Drag.js').then(r => r.default)
			Drag.make(list, async ({id, next_id}) => {
				const senditmsg = await import('/-dialog/senditmsg.js').then(r => r.default)
				const ans = await senditmsg(list, '/-sources/set-prop-ordain', {id, next_id})
			})
		})(document.currentScript.previousElementSibling)
	</script>
`